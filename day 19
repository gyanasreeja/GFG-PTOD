Merge Sort for Linked List
Difficulty: MediumAccuracy: 74.76%Submissions: 81K+Points: 4Average Time: 30m
You are given the head of a linked list. You have to sort the given linked list using Merge Sort.

Examples:

Input:
    
Output: 10 -> 20 -> 30 -> 40 -> 50 -> 60
Explanation: After sorting the given linked list, the resultant list will be:
    
Input:
    
Output: 2 -> 5 -> 8 -> 9
Explanation: After sorting the given linked list, the resultant list will be:
    
Constraints:
1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 106

soluction
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Solution:
    def mergeSort(self, head):
        # Base case: if head is None or only one node
        if not head or not head.next:
            return head
        
        # Split the linked list into two halves
        mid = self.getMiddle(head)
        nextToMid = mid.next
        mid.next = None  # Break the link
        
        # Recursively sort both halves
        left = self.mergeSort(head)
        right = self.mergeSort(nextToMid)
        
        # Merge the sorted halves
        return self.merge(left, right)
    
    def getMiddle(self, head):
        """Find the middle node using slow-fast pointer technique"""
        if not head:
            return head
        
        slow = head
        fast = head
        prev = None
        
        # Move fast pointer 2 steps and slow pointer 1 step
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        
        # Return the node before the actual middle for proper splitting
        return prev if prev else slow
    
    def merge(self, left, right):
        """Merge two sorted linked lists"""
        # Create a dummy node to simplify the merging process
        dummy = Node(0)
        tail = dummy
        
        # Compare nodes from both lists and merge in sorted order
        while left and right:
            if left.data <= right.data:
                tail.next = left
                left = left.next
            else:
                tail.next = right
                right = right.next
            tail = tail.next
        
        # Append remaining nodes (if any)
        if left:
            tail.next = left
        elif right:
            tail.next = right
        
        # Return the merged list (skip dummy node)
        return dummy.next

# Helper functions for testing
def createLinkedList(arr):
    """Create a linked list from an array"""
    if not arr:
        return None
    
    head = Node(arr[0])
    current = head
    for i in range(1, len(arr)):
        current.next = Node(arr[i])
        current = current.next
    return head

def printLinkedList(head):
    """Print the linked list"""
    result = []
    current = head
    while current:
        result.append(str(current.data))
        current = current.next
    return " -> ".join(result)
