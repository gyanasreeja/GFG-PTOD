Linked List Group Reverse

You are given the head of a Singly linked list. You have to reverse every k node in the linked list and return the head of the modified list.
Note: If the number of nodes is not a multiple of k then the left-out nodes at the end, should be considered as a group and must be reversed.

Examples:

Input: k = 2,
   
Output: 2 -> 1 -> 4 -> 3 -> 6 -> 5
Explanation: Linked List is reversed in a group of size k = 2.
   
Input: k = 4,
   
Output: 4 -> 3 -> 2 -> 1 -> 6 -> 5
Explanation: Linked List is reversed in a group of size k = 4.
   
Constraints:
1 ≤ size of linked list ≤ 105
0 ≤ node->data ≤ 106
1 ≤ k ≤ size of linked list 
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Solution:
    def reverseKGroup(self, head, k):
        if not head or k == 1:
            return head
        
        # Count total nodes
        count = 0
        curr = head
        while curr:
            count += 1
            curr = curr.next
        
        # Helper function to reverse a portion of linked list
        def reverse_portion(start, length):
            prev = None
            curr = start
            
            for _ in range(length):
                next_temp = curr.next
                curr.next = prev
                prev = curr
                curr = next_temp
            
            # prev is now the new head of reversed portion
            # start is now the tail of reversed portion
            # curr is the first node of next group
            return prev, start, curr
        
        # Process groups
        dummy = Node(0)
        dummy.next = head
        group_prev = dummy
        curr = head
        
        while curr:
            # Determine size of current group
            group_start = curr
            group_size = min(k, count)
            count -= group_size
            
            # Reverse current group
            new_head, new_tail, next_group = reverse_portion(group_start, group_size)
            
            # Connect with previous group
            group_prev.next = new_head
            new_tail.next = next_group
            
            # Move to next group
            group_prev = new_tail
            curr = next_group
        
        return dummy.next

# Test the solution
def create_linked_list(arr):
    if not arr:
        return None
    
    head = Node(arr[0])
    curr = head
    for i in range(1, len(arr)):
        curr.next = Node(arr[i])
        curr = curr.next
    return head

def print_linked_list(head):
    result = []
    curr = head
    while curr:
        result.append(str(curr.data))
        curr = curr.next
    return " -> ".join(result)
