Maximum subarray sum 2

You are given an array arr[] of integers and two integers a and b, You have to find the maximum possible sum of a contiguous subarray whose length is at least a and at most b.

Examples:

Input: arr[] = [4, 5, -1, -2, 6], a = 2, b = 4
Output: 9
Explanation: The subarray [4, 5] has length 2 and sum 9, which is the maximum among all subarrays of length between 2 and 4.
Input: arr[] = [-1, 3, -1, -2, 5, 3, -5, 2, 2], a = 3, b = 5
Output: 8
Explanation: The subarray [3, -1, -2, 5, 3] has length 5 and sum 8, which is the maximum among all subarrays of length between 3 and 5.
Constraints:
1 ≤ arr.size() ≤ 105
-105 ≤ arr[i] ≤ 105
1 ≤ a ≤ b ≤ arr.size()
  Solution:
from collections import deque

class Solution:
    def maxSubarrSum(self, arr, a, b):
        n = len(arr)
        
        # Calculate prefix sums
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + arr[i]
        
        # Deque stores indices of prefix array
        # We maintain minimum prefix values in valid range
        dq = deque()
        max_sum = float('-inf')
        
        # Process each ending position
        for j in range(a, n + 1):
            # Add the prefix sum that can form subarray of length 'a' to 'b'
            # For subarray ending at j-1, starting position can be from (j-b) to (j-a)
            left = j - b  # leftmost starting position (inclusive)
            right = j - a  # rightmost starting position (inclusive)
            
            # Add new elements to deque (prefix sums from left to right)
            # We only add prefix[right] as we move forward
            if right >= 0:
                # Remove elements from back that are >= current element
                while dq and prefix[dq[-1]] >= prefix[right]:
                    dq.pop()
                dq.append(right)
            
            # Remove elements outside the valid window
            while dq and dq[0] < left:
                dq.popleft()
            
            # Calculate max sum using minimum prefix in valid range
            if dq:
                max_sum = max(max_sum, prefix[j] - prefix[dq[0]])
        
        return max_sum
