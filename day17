Find length of Loop

Given the head of a linked list, determine whether the list contains a loop. If a loop is present, return the number of nodes in the loop, otherwise return 0.

Note: Internally, pos(1 based index) is used to denote the position of the node that tail's next pointer is connected to. If pos = 0, it means the last node points to null, indicating there is no loop. Note that pos is not passed as a parameter.

Examples:

Input: pos = 2,
   
Output: 4
Explanation: There exists a loop in the linked list and the length of the loop is 4.
Input: pos = 3,
   
Output: 3
Explanation: The loop is from 19 to 10. So length of loop is 19 → 33 → 10 = 3.
Input: pos = 0,
    
Output: 0
Explanation: There is no loop.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 104
0 ≤ pos < number of nodes
solution:class Node:
    def __init__(self, data): 
        self.data = data
        self.next = None

class Solution:
    def lengthOfLoop(self, head):
        if not head or not head.next:
            return 0
        
        # Phase 1: Detect if loop exists using Floyd's algorithm
        slow = head
        fast = head
        
        # Move slow pointer by 1 and fast pointer by 2
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
            # If they meet, loop exists
            if slow == fast:
                break
        
        # If no loop found
        if not fast or not fast.next:
            return 0
        
        # Phase 2: Count the length of the loop
        # Keep one pointer at meeting point, move the other until they meet again
        count = 1
        current = slow.next
        
        while current != slow:
            count += 1
            current = current.next
        
        return count

# Test cases
def create_linked_list_with_loop(values, pos):
    """Helper function to create a linked list with loop at given position"""
    if not values:
        return None
    
    # Create nodes
    head = Node(values[0])
    current = head
    nodes = [head]
    
    for i in range(1, len(values)):
        current.next = Node(values[i])
        current = current.next
        nodes.append(current)
    
    # Create loop if pos > 0
    if pos > 0 and pos <= len(values):
        current.next = nodes[pos - 1]  # pos is 1-based
    
    return head
