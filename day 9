Count the number of possible triangles

Given an integer array arr[]. Find the number of triangles that can be formed with three different array elements as lengths of three sides of the triangle. A triangle with three given sides is only possible if sum of any two sides is always greater than the third side.

Examples:

Input: arr[] = [4, 6, 3, 7]
Output: 3
Explanation: There are three triangles possible [3, 4, 6], [4, 6, 7] and [3, 6, 7]. Note that [3, 4, 7] is not a possible triangle.  
Input: arr[] = [10, 21, 22, 100, 101, 200, 300]
Output: 6
Explanation: There can be 6 possible triangles: [10, 21, 22], [21, 100, 101], [22, 100, 101], [10, 100, 101], [100, 101, 200] and [101, 200, 300].
Input: arr[] = [1, 2, 3]
Output: 0
Explanation: No triangles are possible.
Constraints:
1 ≤ arr.size() ≤ 103
0 ≤ arr[i] ≤ 105
Soluction
class Solution:
    def countTriangles(self, arr):
        n = len(arr)
        if n < 3:
            return 0
        
        # Sort the array to use two-pointer technique
        arr.sort()
        count = 0
        
        # Fix the largest side and find pairs for the other two sides
        for k in range(2, n):  # k is the index of the largest side
            left = 0
            right = k - 1
            
            # Use two pointers to find valid pairs
            while left < right:
                # Check if arr[left] + arr[right] > arr[k]
                if arr[left] + arr[right] > arr[k]:
                    # If this condition is satisfied, then all pairs
                    # (left, left+1), (left, left+2), ..., (left, right-1)
                    # will also satisfy the condition with arr[k]
                    count += (right - left)
                    right -= 1
                else:
                    # arr[left] + arr[right] <= arr[k]
                    # We need a larger sum, so move left pointer
                    left += 1
        
        return count
