Swap Kth nodes from ends
Difficulty: MediumAccuracy: 35.5%Submissions: 69K+Points: 4Average Time: 45m
Given the head of a singly linked list and an integer k. Swap the kth node (1-based index) from the beginning and the kth node from the end of the linked list. Return the head of the final formed list and if it's not possible to swap the nodes return the original list.

Examples:

Input: k = 1,
  
Output: 5 -> 2 -> 3 -> 4 -> 1
Explanation: Here k = 1, hence after swapping the 1st node from the beginning and end the new list will be 5 -> 2 -> 3 -> 4 -> 1.
  
Input: k = 2,
  
Output: 5 -> 9 -> 8 -> 5 -> 10 -> 3
Explanation: Here k = 2, hence after swapping the 2nd node from the beginning and end the new list will be 5 -> 9 -> 8 -> 5 -> 10 -> 3.
  
Constraints:
1 ≤ list size ≤ 104
1 ≤ node->data ≤ 106
1 ≤ k ≤ 104
  Solution:
class Node:
    def __init__(self, x):
        self.data = x
        self.next = None

class Solution:
    def swapKth(self, head, k):
        if not head:
            return head
        
        # Find the length of the linked list
        length = 0
        current = head
        while current:
            length += 1
            current = current.next
        
        # If k is greater than length, return original list
        if k > length:
            return head
        
        # Position of kth node from end (1-based) = length - k + 1 from beginning
        kth_from_end_pos = length - k + 1
        
        # If both positions are same (middle node), no swap needed
        if k == kth_from_end_pos:
            return head
        
        # Find kth node from beginning and its previous node
        prev1 = None
        node1 = head
        for i in range(1, k):
            prev1 = node1
            node1 = node1.next
        
        # Find kth node from end and its previous node
        prev2 = None
        node2 = head
        for i in range(1, kth_from_end_pos):
            prev2 = node2
            node2 = node2.next
        
        # Swap the nodes
        # Update previous node pointers
        if prev1:
            prev1.next = node2
        else:
            head = node2  # node1 was head
            
        if prev2:
            prev2.next = node1
        else:
            head = node1  # node2 was head
        
        # Swap next pointers
        temp = node1.next
        node1.next = node2.next
        node2.next = temp
        
        return head

# Helper function to create linked list from array
def create_linked_list(arr):
    if not arr:
        return None
    head = Node(arr[0])
    current = head
    for i in range(1, len(arr)):
        current.next = Node(arr[i])
        current = current.next
    return head

# Helper function to convert linked list to array for display
def linked_list_to_array(head):
    result = []
    current = head
    while current:
        result.append(current.data)
        current = current.next
    return result
