Search in fully rotated sorted 2D matrix
Difficulty: MediumAccuracy: 69.78%Submissions: 2K+Points: 4Average Time: 20m
You are given a 2D matrix mat[][] of size n x m that was initially filled in the following manner:


Each row is sorted in increasing order from left to right.
The first element of every row is greater than the last element of the previous row.

This implies that if the matrix is flattened row-wise, it forms a strictly sorted 1D array.
Later, this sorted 1D array was rotated at some unknown pivot. The rotated array was then written back into the matrix row-wise to form the current matrix.


Given such a matrix mat[][] and an integer x, determine whether x exists in the matrix.


Examples:

Input: x = 3,
mat[][] = [[7, 8, 9, 10],           
          [11, 12, 13, 1],
          [2, 3, 4, 5]] 
Output: true
Explanation: 3 is located at the 3rd row and 2nd column.
Input: x = 10,
mat[][] = [[6, 7, 8],                         
          [9, 1, 2],
          [3, 4, 5]]
Output: false
Explanation: The value 10 does not exist in the matrix.
Constraint:
1 ≤ n × m ≤ 105
1 ≤ mat[i][j], x ≤ 106
  Soluction:
class Solution:
    def searchMatrix(self, mat, x):
        if not mat or not mat[0]:
            return False
        
        n = len(mat)
        m = len(mat[0])
        
        def getValue(index):
            """Get value at 1D index in the flattened matrix"""
            return mat[index // m][index % m]
        
        left, right = 0, n * m - 1
        
        while left <= right:
            mid = (left + right) // 2
            mid_val = getValue(mid)
            
            if mid_val == x:
                return True
            
            left_val = getValue(left)
            
            # Determine which part is sorted
            if left_val <= mid_val:  # Left part is sorted
                if left_val <= x < mid_val:
                    right = mid - 1
                else:
                    left = mid + 1
            else:  # Right part is sorted
                right_val = getValue(right)
                if mid_val < x <= right_val:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return False
        
