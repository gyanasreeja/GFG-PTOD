Max rectangle
Difficulty: HardAccuracy: 36.43%Submissions: 119K+Points: 8Average Time: 35m
You are given a 2D binary matrix mat[ ][ ], where each cell contains either 0 or 1. Your task is to find the maximum area of a rectangle that can be formed using only 1's within the matrix.

Examples:

Input: mat[][] = [[0, 1, 1, 0],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 0, 0]]
Output: 8
Explanation: The largest rectangle with only 1’s is from (1, 0) to (2, 3) which is
[1, 1, 1, 1]
[1, 1, 1, 1]
and area is 4 * 2 = 8.
Input: mat[][] = [[0, 1, 1],
                [1, 1, 1],
                [0, 1, 1]]
Output: 6
Explanation: The largest rectangle with only 1’s is from (0, 1) to (2, 2) which is
[1, 1]
[1, 1]
[1, 1]
and area is 2 * 3 = 6.
Constraints:
1 ≤ mat.size(), mat[0].size() ≤1000
0 ≤ mat[][] ≤1
Solution:
class Solution:
    def maxArea(self, mat):
        if not mat or not mat[0]:
            return 0
        
        rows, cols = len(mat), len(mat[0])
        heights = [0] * cols
        max_area = 0
        
        for row in range(rows):
            # Update heights for current row
            for col in range(cols):
                if mat[row][col] == 1:
                    heights[col] += 1
                else:
                    heights[col] = 0
            
            # Find max rectangle area in current histogram
            area = self.largestRectangleArea(heights)
            max_area = max(max_area, area)
        
        return max_area
    
    def largestRectangleArea(self, heights):
        """
        Find the largest rectangle area in a histogram using stack approach.
        Time complexity: O(n), Space complexity: O(n)
        """
        stack = []
        max_area = 0
        
        for i in range(len(heights)):
            # While stack is not empty and current height is less than stack top
            while stack and heights[i] < heights[stack[-1]]:
                height = heights[stack.pop()]
                # Width is either i (if stack empty) or i - stack[-1] - 1
                width = i if not stack else i - stack[-1] - 1
                max_area = max(max_area, height * width)
            
            stack.append(i)
        
        # Process remaining bars in stack
        while stack:
            height = heights[stack.pop()]
            width = len(heights) if not stack else len(heights) - stack[-1] - 1
            max_area = max(max_area, height * width)
        
        return max_area
